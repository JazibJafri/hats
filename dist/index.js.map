{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/**\r\n *\r\n * @param str the string to convert\r\n * @param symbol currency symbol\r\n * @param symbolPosition position to attach symbol. Default: before\r\n * @param separator delimiter to use between numbers. Default: ' (single-quote)\r\n */\r\nexport const toCurrency = (\r\n    str: string,\r\n    symbol: string = '',\r\n    symbolPosition: 'before' | 'after' = 'before',\r\n    separator: string = \"'\",\r\n) => {\r\n    if (str.split('').length < 4) {\r\n        return str;\r\n    }\r\n    const reversedArray = str.split('').reverse();\r\n    let reversedStr = '';\r\n    reversedArray.forEach((ch, index) => {\r\n        const isThirdUnit = (index + 1) % 3 == 0;\r\n        const isNotFirstElement = index + 1 != reversedArray.length;\r\n        reversedStr += ch;\r\n        if (isThirdUnit && isNotFirstElement) {\r\n            reversedStr += separator;\r\n        }\r\n    });\r\n    const currency = reversedStr.split('').reverse().join('');\r\n    return symbolPosition == 'before' ? `${symbol}${currency}` : `${currency}${symbol}`;\r\n};\r\n\r\n/**\r\n *\r\n * @param str the string to convert\r\n * @param keep array of words to ignore. Like \"as\", \"of\"\r\n */\r\nexport const toTitleCase = (str: string, keep: string[] = []) => {\r\n    const words = str.split(' ');\r\n    const titleWords = words.map(word => {\r\n        if (keep.includes(word)) {\r\n            return word;\r\n        }\r\n        return `${word.charAt(0).toUpperCase()}${word.substring(1).toLowerCase()}`;\r\n    });\r\n    return titleWords.join(' ');\r\n};\r\n\r\n/**\r\n *\r\n * @param str the string to convert\r\n * @param keep array of words to ignore. Like \"London\"\r\n * @param modify array of words to capitalize the first letter of, in addition to the first letter of the string\r\n */\r\nexport const toSentenceCase = (\r\n    str: string,\r\n    keep: string[] = [],\r\n    modify: string[] = [],\r\n) => {\r\n    const words = str.split(' ');\r\n    const sentenceWords = words.map(word => {\r\n        if (keep.includes(word)) {\r\n            return word;\r\n        }\r\n        if (modify.includes(word)) {\r\n            return `${word.charAt(0).toUpperCase()}${word.substring(1).toLowerCase()}`;\r\n        }\r\n        return word.toLowerCase();\r\n    });\r\n    const sentence = sentenceWords.join(' ');\r\n    return `${sentence.charAt(0).toUpperCase()}${sentence.substring(1)}`;\r\n};\r\n\r\n/**\r\n * \r\n * @param str the string to convert\r\n * @param truncateOn index to cutoff the string. Default: 150\r\n */\r\nexport const toTruncatedText = (str: string, truncateOn = 150) => {\r\n    return `${str.slice(0, truncateOn).trim()}...`;\r\n};\r\n"],"names":[],"mappings":"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"}